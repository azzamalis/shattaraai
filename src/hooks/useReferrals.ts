
import { useState, useEffect } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { useAuth } from '@/hooks/useAuth';
import { Database } from '@/integrations/supabase/types';

type UserReferral = Database['public']['Tables']['user_referrals']['Row'];
type ReferralActivity = Database['public']['Tables']['referral_activities']['Row'];
type ReferralReward = Database['public']['Tables']['referral_rewards']['Row'];

export const useReferrals = () => {
  const { user } = useAuth();
  const [userReferral, setUserReferral] = useState<UserReferral | null>(null);
  const [activities, setActivities] = useState<ReferralActivity[]>([]);
  const [rewards, setRewards] = useState<ReferralReward[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const fetchUserReferral = async () => {
    if (!user) return;

    try {
      const { data, error } = await supabase
        .from('user_referrals')
        .select('*')
        .eq('user_id', user.id)
        .single();

      if (error && error.code !== 'PGRST116') {
        throw error;
      }

      setUserReferral(data);
    } catch (err) {
      console.error('Error fetching user referral:', err);
      setError('Failed to load referral data');
    }
  };

  const fetchReferralActivities = async () => {
    if (!user) return;

    try {
      const { data, error } = await supabase
        .from('referral_activities')
        .select('*')
        .eq('referrer_user_id', user.id)
        .order('created_at', { ascending: false });

      if (error) throw error;
      setActivities(data || []);
    } catch (err) {
      console.error('Error fetching referral activities:', err);
    }
  };

  const fetchReferralRewards = async () => {
    if (!user) return;

    try {
      const { data, error } = await supabase
        .from('referral_rewards')
        .select('*')
        .eq('user_id', user.id)
        .order('created_at', { ascending: false });

      if (error) throw error;
      setRewards(data || []);
    } catch (err) {
      console.error('Error fetching referral rewards:', err);
    }
  };

  const trackReferralActivity = async (
    inviteCode: string,
    activityType: 'link_clicked' | 'signup_completed' | 'first_content_uploaded' | 'reward_earned',
    metadata: Record<string, any> = {}
  ) => {
    try {
      const { error } = await supabase.functions.invoke('track-referral', {
        body: {
          invite_code: inviteCode,
          activity_type: activityType,
          metadata,
          ip_address: null, // Can be populated by edge function
          user_agent: navigator.userAgent
        }
      });

      if (error) throw error;
      
      // Refresh data after tracking
      await fetchReferralActivities();
    } catch (err) {
      console.error('Error tracking referral activity:', err);
    }
  };

  const createReferralCode = async () => {
    if (!user) return null;

    try {
      const { data, error } = await supabase
        .from('user_referrals')
        .insert({
          user_id: user.id,
          invite_code: '' // Will be generated by database function
        })
        .select()
        .single();

      if (error) throw error;
      setUserReferral(data);
      return data.invite_code;
    } catch (err) {
      console.error('Error creating referral code:', err);
      setError('Failed to create referral code');
      return null;
    }
  };

  useEffect(() => {
    if (user) {
      const loadData = async () => {
        setLoading(true);
        await Promise.all([
          fetchUserReferral(),
          fetchReferralActivities(),
          fetchReferralRewards()
        ]);
        setLoading(false);
      };

      loadData();
    } else {
      setLoading(false);
    }
  }, [user]);

  return {
    userReferral,
    activities,
    rewards,
    loading,
    error,
    trackReferralActivity,
    createReferralCode,
    refreshData: () => {
      fetchUserReferral();
      fetchReferralActivities();
      fetchReferralRewards();
    }
  };
};
